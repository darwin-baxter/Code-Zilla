You are given a graph with 'N' vertices numbered from '1' to 'N' and 'M' edges. 
You have to colour this graph in two different colours, s
ay blue and red such that no two vertices connected by an edge are of the same colour.

----------------------------------USING DFS-------------------------------------------------------------------------
#include <iostream>
#include <vector>
using namespace std;
bool isPossible(vector<vector<int>> &adj,int curr,int parent,int currColour,vector<int>&colour)
{
    colour[curr] = currColour;
    bool possible = true;
    for (int i = 0; i < adj[curr].size(); i++)
    {
        int next = adj[curr][i];
        if (colour[next] == 0)
            possible  = (possible && isPossible(adj, next, curr, -1 * currColour, colour));
        else if (next != parent && colour[next] == currColour)
            return false;
    }
    return possible;
}
int main()
{
    int n, m, u, v;
    cin >> n >> m;
    vector<vector<int>> adj(n + 1);
    vector<int> colour(n + 1, 0);
    for (int i = 0; i < m; i++)
    {
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    bool possible = true;
    for (int i = 1; i <= n; ++i)
        if (colour[i] == 0)
            possible = (possible && isPossible(adj, i, -1, 1, colour));
    possible? cout << "YES\n" : cout << "NO\n";
    return 0;
}
----------------------------------------------------------USING BFS ------------------------------------------------------------------------------

#include <iostream>
#include<bits/stdc++.h>
using namespace std;
bool check(vector<vector<int>> &adj,vector<int> color, int src,int m)
{
    color[src]=1;
    queue<int> q;
    q.push(src);
    while(!q.empty())
    {
        int u=q.front();
        q.pop();
        for(int i=0;i<adj[u].size();i++)
        {
	    int ele=adj[u][i];
            if(color[ele]==color[adj[u][0]])
            	return false;
	    if(color[ele]==-1)
            {
                color[ele]=1-color[adj[u][0]];
                q.push(ele);
            }
        }
    }
    return true;
}
bool possibleBipartition(int N, vector<vector<int>> & dislikes)
{
	vector<vector<int>>adj(N+1);
	for(int i=0;i<dislikes.size();++i)
	{
		adj(dislikes[i][0]).push_back(dislikes[i][1]);
		adj(dislikes[i][1]).push_back(dislikes[i][0]);
	}
	vector<int> color(N+1,-1);
	for(int i=1;i<=N;i++)
		if(color[i]==-1)
			if(!check(adj,N,i,color))
				return false;
	return true;
}

