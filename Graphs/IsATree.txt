Given a graph with 'V' vertices numbered from 0 to 'V' - 1 and 'E' edges. Determine if it is a tree or not?


#include <iostream>
#include <vector>
#include <queue>

using namespace std;
bool isCyclic(int u, vector<bool> &visited,int parent,vector<vector<int>> &adj)
{
    visited[u]=true;
    for(int i=0;i<adj[u].size();i++)
    {    if(!visited[adj[u][i]])
    	{	 if(isCyclic(adj[u][i],visited,u,adj))
                return true;
        }
    	else if(adj[u][i]!=parent)
            return true;
    }
    return false;
}
bool isTree(vector<vector<int>> &adj, int V)
{
    vector<bool> visited(V);
    fill(visited.begin(),visited.end(),false);
    if(isCyclic(0,visited,-1,adj))
        return false;
    for(int i=0;i<V;i++)
        if(!visited[i])
            return false;
    return true;
}

// Do not change this part of the code. You only need to complete the isTree function above.
int main()
{
    int v, e;
    cin >> v >> e;

    vector<vector<int>> adj(v);

    for (int i = 0, a, b; i < e; ++i)
    {
        cin >> a >> b;
        adj[a].push_back(b);
        adj[b].push_back(a);
    }

    if (isTree(adj, v))
    {
        cout << "True";
    }
    else
    {
        cout << "False";
    }

    return 0;
}