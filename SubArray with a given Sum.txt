Given an unsorted array A of size N that contains only non-negative integers, 
find a continuous sub-array which adds to a given number S.
Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)

class Solution
{
    public:
    //Function to find a continuous sub-array which adds up to a given number.
    vector<int> subarraySum(int arr[], int n, int s)
    {
        int i=0,j=0;
        vector<int> v={0,0};
        int sum=0;
        while(j<n)
        {
            sum+=arr[j];
            if(sum<s)
                j++;
            if(sum==s)
            {
                v[0]=i+1;
                v[1]=j+1;
                return v;
            }
            else if(sum>s)
            {
                while(sum>s)
                {
                    sum=sum-arr[i];
                    i++;
                    if(sum==s)
                    {
                        v[0]=i+1;
                        v[1]=j+1;
                        return v;
                    }   
                }
                j++;
            }
        }
        return {-1};
    }
};

// { Driver Code Starts.

int main()
 {
    int t;
    cin>>t;
    while(t--)
    {
        int n;
        long long s;
        cin>>n>>s;
        int arr[n];
        
        for(int i=0;i<n;i++)
            cin>>arr[i];
        Solution ob;
        vector<int>res;
        res = ob.subarraySum(arr, n, s);
        
        for(int i = 0;i<res.size();i++)
            cout<<res[i]<<" ";
        cout<<endl;
        
    }
	return 0;
}  // } Driver Code Ends

 